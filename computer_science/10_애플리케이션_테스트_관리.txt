<애플리케이션 테스트 케이스 설계>
--애플리케이션 테스트 케이스 작성
    --소프트웨어 테스트(Test)란? 
        --응용 애플리케이션이나 시스템이 사용자가 요구하는 기능과 성능, 사용성, 안정성 등을 만족하는 지 확인하고,
          숨어있는 소프트웨어의 결함을 찾아내는 활동.

    --소프트웨어 테스트 원리

        --살충제 패러독스: 동일한 테스트 케이스에 대한 반복적 테스트는 새로운 버그를 찾지 못함.
                          테스트 케이스의 정기적 리뷰와 개선, 새로운 시각의 접근이 필요하다는 의미를 담고 있다.

        --결함 집중: 적은 수의 모듈에서 대다수의 결함이 발견됨.
                    소프트웨어 테스트에서 오류의 80%는 전체 모듈의 20% 내에서 발견된다는 의미.
                    파레토의 법칙: 80대 20의 법칙 적용.

        --테스팅은 정황에 의존적: 소프트웨어 성격에 맞게 테스트를 실시해야 한다.
                                정황과 비즈니스 도메인에 따라 테스트를 다르게 수행해야한다.

        --오류-부재의 궤변: 요구사항을 충족시켜주지 못한다면, 결함이 없다고 해도 품질이 높다고 볼 수 없다.

        --브룩스의 법칙: "지체되는 소프트웨어 개발 프로젝트에 인력을 추가하는 것은 개발을 늦출 뿐이다"
                        인력이 추가되었을 때, 개발 생산성은 향상되지않고 오히려 그 인력때문에 방해된다는 의미.

    --소프트웨어 테스트(Test) 산출물

        --Test Plan: (테스트 계획서)
        --Test Basis: (테스트 베이시스): 분석, 설계 단계의 논리적인 Case로 '테스트 설계를 위한 기준이 되는 문서'
        **Test Case: (테스트 케이스) : 특정 요구사항을 준수하는 지 확인하기 위해 개발된 실행 조건, 입력값, 기대 결과 등의 집합
        --Test Suites: (테스트 슈트) : Test Case를 실행환경에 따라 구분해 놓은 Test Case 집합
                                       단, 시나리오가 포함되지 않은 단순한 테스트 케이스들의 모음
        --Test Scenario: (테스트 시나리오) : 애플리케이션이 테스트되어야 할 기능 및 특징, 테스트가 필요한 상황을 작성한 문서
                                            테스트 시나리오가 테스트 케이스와 1 대 다의 관계를 가짐
        --Test Script: (테스트 스크립트) : 테스트 케이스의 실행 순서(절차)를 작성한 문서
                                          == Test step, Test Procedure 
        --Test Results: (테스트 결과서)

    --소프트웨어 테스트 유형
        
        --정적 테스트

            --리뷰
                --관리 리뷰: 프로젝트 진행 상황에 대한 전반적인 검토를 바탕으로 의사 결정을 지원하는 리뷰.
                --기술 리뷰: 정의된 계획 및 명세를 준수하고 있는 지에 대한 검토를 수행하는 리뷰. (관리자 O)
                --인스펙션(동료 검토): 저작자 외의 다른 전문가가 검사하여 문제에 대한 올바른 해결을 찾아내는, 형식적인 검토 기법. (관리자 X)
                --워크스루: 검토 자료를 회의 전 배포에서 사전 검토를 한 후, 짧은 시간동안 회의를 진행하는 형태. 비형식적인 검토 기법. (관리자 X)
                --감사: 소프트웨어 규제, 표준, 가이드라인을 준수하고 있는 지 독립적으로 평가하는 기법.

            --정적 분석

        --동적 테스트

            --화이트박스 테스트: 각 응용 프로그램의 내부 구조와 동작을 검사하는 소프트웨어 테스트. ------------------------ (구조 기반 테스트)
                                내부 소스 코드의 동작을 개발자가 추적할 수 있기 때문에, 동작의 유효성, 실행되는 과정을 확인할 수 있음.
                                (코드 기반 테스트)(로직 기반 테스트)(글래스 박스 테스트)

                --구문(문장) 커버리지: 
                --'결정'(선택)(분기) 커버리지  -> 결정 포인트 내의 '전체 조건식'이 적어도 한번은 참(T)과 거짓(F)의 결과를 수행하는 테스트 커버리지.
                --'조건' 커버리지             -> 결정 포인트 내의 '개별 조건식'이 적어도 한번은 참(T)과 거짓(F)의 결과를 수행하는 테스트 커버리지.
                --'조건/결정' 커버리지         -> '결정' 커버리지와 '조건' 커버리지를 최소한의 '조합'으로 달성하는 테스트 커버리지.
                                                 '전체 조건식'뿐만 아니라 '개별 조건식'도 한번은 참(T)과 거짓(F)의 결과를 수행하는 테스트 커버리지.
                --변경 '조건/결정' 커버리지    -> 각 개별 조건식이 다른 개별 조건식에 영향을 받지 않고, 독립적으로 행동하게 함으로써 조건.결정 커버리지를 향상시키는 테스트 커버리지.
                --다중 조건 커버리지           -> 결정 조건 내 보든 개별 조건식의 모든 가능한 조합을 100% 보장하는 테스트 커버리지.
                --기본 경로 커버리지           -> '맥케이브의 순환 복잡도' 개념을 기반으로 커버리지 계산 V(G) = E-N+2;
                --제어 흐름 테스트             -> 프로그램 제어 구조를 제어 흐름 그래프로 나타내어 내부 로직을 테스트하는 기법
                --데이터 흐름 테스트           -> 제어 흐름 그래프에 데이터 사용현황을 추가한 그래프를 통해 테스트하는 기법
            
            --블랙박스 테스트: 프로그램 외부 사용자의 요구사항 명세를 보면서 수행하는 테스트. ------------------------------ (명세 기반 테스트)
                              기능 및 동작 위주의 테스트를 진행하기 때문에 내부 구조나 작동 원리는 알지 못해도 가능함.

                --동등분할(동치분할) 테스트     -> 동등 클래스의 대푯값 선정
                --경곗값 분석 테스트           -> 동등분할 후, 경곗값 부분에서 오류 날 확률 높기 때문에, 최솟값 바로 위, 최댓값 바로 아래 등 극한 한계를 테스트하는 기법
                --결정테이블 테이스            -> 요구사항의 논리와 발생조건을 테이블 형태로 나열하여, 조건과 행위를 모두 조합하여 테스트하는 기법
                --상태 전이 테스트             -> 상태 전이도를 모델링 한 후, 전이 트리를 만들어 테스트 케이스를 도출하는 기법
                --유스케이스 테스트            -> 시스템이 유스케이스로 모델링되어있을 때, 프로세시 흐름을 기반으로 테스트 케이스를 명세화하여 수행하는 테스트
                --분류 트리 테스트             -> SW의 일부 또는 전체를 트리 구조로 분석 및 표현하여 테스트 케이스를 설계하여 수행하는 테스트
                --페어와이즈 테스트            -> 테스트 데이터 값들 간에 최소한 한 번씩을 조합하는 방식이며, 커버해야 할 기능적 범위를 모든 조합에 비해 상대적으로 적은 테스트 세트를 구성하기 위한 테스트 기법
                --원인-결과 그래프 테스트       -> 
                --비교 테스트                  ->

                --(경험 기반 테스트):

                    --탐색적 테스트
                    --오류 추정
                    --체크리스트
                    --특성테스트

    --테스트 오라클

        --테스트 오라클이란? 테스트 결과가 참인지 거짓인지를 판단하기 위해서 사전에 정의된 참값을 입력하여 비교하는 기법.

        --테스트 오라클 종류

            --참(True)오라클: '모든' 입력값에 대하여 기대하는 결과를 생성함으로써 발생된 오류를 모두 검출할 수 있는 오라클
            --샘플링(Sampling)오라클: '특정한 몇 개'의 입력값에 대해서만 기대하는 결과를 제공해 주는 오라클
            --휴리스틱(Heuristic)오라클: 샘플링 오라클을 개선한 오라클. 특정 입력값에 대해 올바른 결과를 제공하고, 나머지 값들에 대해서는 휴리스틱(추정)으로 처리하는 오라클
            --일관성 검사(Consistent)오라클: 애플리케이션 변경이 있을 때, 수행 전과 후의 결괏값이 동일한지 확인하는 오라클

---------------------------------------------------------------------------------------------------------------

Q1. 살충제 패러독스의 개념에 관해서 서술하시오.
    --살충제 패러독스는 동일한 테스트 케이스에 의한 반복적 테스트는 새로운 버그를 찾지 못한다는 원리로,
      테스트 케이스의 정기적 리뷰와 개선, 다른 시각의 접근이 필요하다는 의미를 담고 있다.

Q2. 테스트의 종류 중 동치 분할 테스트, 경곗값 분석 테스트 등의 종류가 있는 테스트 기법을 쓰시오.
    --블랙박스 테스트 (명세 기반 테스트)

Q3. 다음 아래 제어 흐름 그래프가 분기 커버리지를 만족하기 위한 테스팅 순서를 쓰시오.
    --결정=선택=분기 (커버리지); -> 전체 조건식 참/거짓
    --1-2(T)-3-4-5-6(F)-7; 
    --1-2(F)  -4-5-6(T)-1;

    혹은

    --1-2(T)-3-4-5-6(T)-7;
    --1-2(F)  -4-5-6(F)-1;

Q4. 테스트 오라클 중 특정한 몇 개의 입력값에 대해서만 기대하는 결과를 제공해주는 오라클은 무엇인가?
    --샘플링 오라클

Q5. 점수에 따른 성적 부여가 잘 되었는지 테스트하고자 아래에 알맞은 테스트 기법은 무엇인가?
    --동등분할 테스트 (동치분할 테스트)

---------------------------------------------------------------------------------------------------------------

<애플리케이션 통합 테스트>
--애플리케이션 테스트 수행

    --01단위 테스트
        --단위 테스트란? 
            --개별적인 모듈 혹은 개별적인 컴포넌트를 테스트하기 위한 기법
            --구현 단계에서 각 모듈을 구현한 후 수행한다.
            --개별적인 모듈에 대해 컴포넌트 테스트를 수행하려면,
              모듈을 단독으로 실행할 수 있는 테스트 베드(Test Bed)라는 환경이 필요하다.

    --02통합 테스트
        --통합 테스트란?
            --소프트웨어 각 모듈 간의 인터페이스 관련 결함을 찾아내기 위한 체계적인 테스트 기법
            --단위 테스트가 끝난 모듈 또는 컴포넌트 단위의 프로그램이 설계 단계에서 제시한
              애플리케이션과 동일한 구조와 기능으로 구현되었는 지 확인하는 테스트

            --통합 테스트 수행 방법

                --비점증적 방식

                    --빅뱅 방식

                --점증적 방식

                    --하향식 통합(Top Down)

                        --깊이-우선 방식
                        --너비-우선 방식
                        --(테스트)스텁(Stub)

                    --상향식 통합(Bottom Up)

                        --(테스트)드라이버
                        --클러스터

                    --샌드위치 통합: 하향식 통합 + 상향식 통합

    --03 시스템 테스트

    --04 인수 테스트

    --테스트 자동화 도구
        --테스트 자동화 도구란? 
            --반복적인 테스트 작업을 스크립트 형태로 구현함으로써, 테스트 시간과 인력 투입 비용을 최소화하면서 쉽고 효율적인 테스트를 수행할 수 있는 방법.

        --테스트 자동화 도구 유형

            --정적 분석 도구 (Static Analysis Tools): 애플리케이션을 실행하지 않고, 소스 코드에 대한 코딩 표준, 코딩 스타일,
                                                     코드 복잡도 및 남은 결함을 발견하기 위해 사용하는 도구.
            --테스트 실행 도구 (Test Execution Tools): 특정 데이터와 테스트 수행 방법이 적힌 스크립트를 실행하는 도구.
            --성능 테스트 도구 (Performance Test Tools): 애플리케이션의 처리량, 응답 시간, 경과 시간, 자원 사용률에 대해
                                                        테스트를 수행함으로써 성능 목표를 달성하였는지를 확인하는 도구.
            --테스트 통제 도구 (Test Control Tools): 테스트 관리 도구 / 형상 관리 도구 / 결함 추적 도구
            --회귀 테스트: 오류를 제거하거나 수정한 시스템에서 오류 제거와 수정에 의해 새로이 유입된 오류가 없는 지 확인하는 테스트

        --테스트 하네스 (Test Harness)
            --테스트 하네스란?
                --애플리케이션 모듈 및 컴포넌트를 테스트하는 환경의 일부분.
                --테스트를 지원하기 위한 코드와 데이터를 말한다.
                --단위테스트에 사용하기 위해 코드 개발자가 작성한다.

            --테스트 하네스 구성요소
                --테스트 드라이버
                --테스트 스텁
                --테스트 슈트

---------------------------------------------------------------------------------------------------------------

Q1. 애플리케이션을 실행하지 않고, 소스 코드에 대한 코딩 표준, 코딩 스타일, 코드 복잡도 및 남은 결함을 발견하기 위해 사용하는 도구는 무엇인가.
    --정적 분석 도구

---------------------------------------------------------------------------------------------------------------

<애플리케이션 성능 개선>
--애플리케이션 성능 분석

    --애플리케이션 성능 지표

        --처리량: 애플리케이션이 주어진 시간에 처리할 수 있는 트랜잭션의 수
                  
        --응답 시간: 사용자 입력이 끝난 후, 애플리케이션의 응답이 출력될 때까지의 시간
                     애플리케이션의 경우 메뉴 클릭 시 해당 메뉴가 나타나기까지 걸리는 시간

        --경과 시간: 애플리케이션에 사용자가 요구를 입력한 시점부터 
                     트랜잭션을 처리 후 그 결과의 출력이 완료될 때까지 걸리는 시간

        --자원 사용률: 애플리케이션이 트랜잭션을 처리하는 동안 사용하는 CPU 사용량, 메모리 사용량, 네트워크 사용량

    --애플리케이션 성능 개선

        --소스 코드 최적화란?
            --읽기 쉽고 변경 및 추가가 쉬운 클린 코드를 작성하는 것.

        