<인터페이스 설계 확인>
    --인터페이스
        --사용자 인터페이스

        --시스템 인터페이스
            --시스템 인터페이스 '정의서'
                --주요 항목 (상세 기능 인터페이스 정의서)
                        --인터페이스 ID
                        --인터페이스명
                        --오퍼레이션 명
                        --오퍼레이션 개요
                        --사전 조건
                        --사후 조건
                        --파라미터
                        --반환값

            --시스템 인터페이스 '명세서'

            --시스템 인터페이스 '설계서' : 내 외부 모듈 간 공통 기능 확인 or 데이터 인터페이스 확인
                --정적/동적 모형을 통한 인터페이스 설계서
                --데이터 명세를 통한 인터페이스 설계서

                    --> 내 외부 모듈 연계 방법
                            --EAI (Enterprise Application Integration)
                            --ESB (Enterprise Service Bus)

                    --> 내 외부 모듈 간 데이터 표준 확인
                            --데이터 인터페이스를 통해 데이터 표준 확인
                            --인터페이스 기능을 통해 데이터 표준 확인
                                    
                                    --절차
                                        --01 데이터 인터페이스 입 출력 의미 파악
                                        --02 데이터 인터페이스 입 출력 의미 파악을 통한 데이터 표준 확인
                                        --03 인터페이스 데이터 항목 식별
                                        --04 데이터 표준 최종 확인

<인터페이스 기능 구현>
    --모듈 간 세부 설계서 확인 -> 일관되고 정형화된 인터페이스 기능 구현 위해
        --ex. 컴포넌트 명세서
        --ex. 인터페이스 명세서

    --인터페이스 기능 구현 기술

        --JSON (Javascript Object Notation)

            --속성-값 쌍, 키-값 쌍으로 이루어진 데이터 오브젝트를 전달하기 위해
              인간이 읽을 수 있는 텍스트를 사용하는 '개방형 표준 포맷'
            --AJAX에서 많이 사용되고, XML을 대체하는 주요 데이터 포맷
            --표현 자료형: Number, String, Array, Object
            --장점: XML보다 가볍고 빠름 / 자료 종류에 큰 제한이 없음 / XML은 모두 string, JSON은 표현 자료형 다양함
            --단점: 태그가 없어서 가독성이 떨어짐 / DTD 같은 것이 없기에 데이터 형식이 틀렸을 경우 체크하기 쉽지 않음

        --XML (Extensible Markup Language)

            --XML은 HTML의 단점을 보완한 인터넷 언어로, SGML의 복잡한 단점을 개선한 '마크업 언어'
            --XML 프롤로그 문법
                --version: XML의 버전 명시
                --encoding: XML의 언어 set 명시
                --standalone: XML 문서 해석할 때, 외부 문서의 참조 여부 명시 (생략 시 no = 외부 문서 참조한다)

        --AJAX (Asynchronous Javascript And XML)

            --자바스크립트를 사용하여 웹 서버와 클라이언트 간 비동기적으로 XML 데이터를 교환하고 조작하기 위한 웹 기술
            --브라우저가 가지고 있는 XMLHttpRequest 객체를 이용해서 전체 페이지를 새로 로드하지 않고 필요한 일부 페이지의 데이터만을 로드하는 기법
            --주요 기술: 
                --XMLHttpRequest: 웹 브라우저와 웹 서버 간에 메서드가 데이터를 전송하는 객체 폼의 API
                                  비동기 통신을 담당하는 자바스크립트 객체
                --DOM: Document Object Model
                       XML 문서를 트리 구조의 형태로 접근할 수 있게 해주는 API
                       플랫폼/언어 중립적으로 구조화된 문서를 표현하는 객체지향 모델
                --XSLT: Extensible Stylesheet Language Transformations
                        XML 문서를 다른 XML 문서로 변환하는 데 사용하는 XML 기반 언어
                        W3C에서 제정한 표준으로, 탐색하기 위해 XPath를 사용함
                --HTML: HyperText Markup Language
                        인터넷 웹(WWW) 문서를 표현하는 표준화된 마크업 언어

        --REST (Representational State Transfer)
        
            --웹과 같은 분산 하이퍼미디어 환경에서 자원의 존재나 상태 정보를
              표준화된 HTTP 메서드로 주고받는 웹 아키텍쳐
            --리소스(자원), 메서드(처리), 메세지 -> 3가지 요소로 구성됨
            --POST(생성), GET(조회), PUT(수정), DELETE(삭제)

    --인터페이스 구현
        --데이터 통신을 사용해서 인터페이스 구현
        --인터페이스 개체(Entity)를 사용하는 인터페이스 구현

    --인터페이스 예외 처리 방안
        --데이터 통신을 사용한 예외 처리 방법
        --인터페이스 개체(Entity)를 사용한 예외 처리 방법

    --인터페이스 보안 기능 적용

        --APM(Application Performance Managemnet): 인터페이스의 동작이 잘 진행되는지 지속적으로 확인하기 위해서 사용하는 감시 도구.
                                                    DB, 웹 애플리케이션의 트랜잭션과 변숫값, 호출 함수, 로그 및 시스템 부하 등 종합적인 정보를 조회하고,
                                                    커넥션 풀(Connection Pools)등 지속적인 모니터링이 필요한 자원을 효과적으로 관리하는 도구

        --시큐어 코딩 가이드 적용

        --데이터베이스 보안 적용
            --데이터베이스 암호화 알고리즘

                --대칭 키 암호화 알고리즘
                --비대칭 키 암호화 알고리즘
                --해시 암호화 알고리즘
            
            --데이터베이스 암호화 기법

                --API 방식: 애플리케이션 레벨에서 암호 모듈(API)을 적용하는 애플리케이션 수정 방식
                            App 서버에 암호화 복호화, 정책 관리, 키 관리 등의 부하 발생
                --Plug-In 방식: 암호화 복호화 모듈이 DB 서버에 설치된 방식
                                DB 서버에 암호화 복호화, 정책 관리, 키 관리 등의 부하 발생
                --TDE 방식: DB 서버의 DBMS 커널이 자체적으로 암호화 복호화 기능을 수행하는 방식
                            Transparent Data Encryption 내장되어 있는 암호화 기능을 이용
                --Hybrid 방식: API방식 + Plug-In방식을 결합하는 방식
                               DB 서버와 App 서버로 부하 분산
     
        --중요 인터페이스 데이터의 암호화 전송

            --IPSec: IP Security
                     IP 계층 (3계층)에서 ...
            --SSL/TLS: 전송 계층(4계층)과 응용 계층(7계층) 사이에서 ...
            --S-HTTP: Secure Hypertext Transfer Protocol
                      웹상에서 네트워크 트래픽을 암호화하는 주요 방법
                      클라이언트와 서버 간에 전송되는 모든 메세지를 암호화하여 전송

<인터페이스 구현 검증>
    --인터페이스 구현 검증 도구

        --xUnit: 자바(Junit), C++(Cppunit), .Net(Nunit) 등 다양한 언어를 지원하는 단위테스트 프레임워크
                 함수나 클래스 같은 서로 다른 구성 단위를 테스트할 수 있게 해주는 도구
        --STAF: 서비스 호출, 컴포넌트 재사용 등 다양한 환경을 지원하는 테스트 프레임워크
                각 테스트 대상 분산 환경에 '데몬'을 사용
                강점: 재사용 및 확장성
        --FitNesse: 사용자가 테스트 케이스 테이블을 작성하면 빠르고 편하게 자동으로 원하는 값에 대해 테스트를 할 수 있다는 장점.
                    웹 기반 테스트 케이스 설계/실행/결과 확인 등을 지원하는 테스트 프레임워크
                    강점: 협업 기능
        --NTAF: FitNesse의 장점인 협업 기능과 STAF의 장점인 재사용 및 확장성을 통합한 NHN(Naver)의 테스트 자동화 프레임워크
        --Selenium: 테스트 스크립트 언어를 학습할 필요 없이 기능 테스트를 만들기 위한 인터페이스 구현 검증 도구
                    다양한 브라우저 지원 및 개발 언어를 지원하는 웹 애플리케이션 테스트 프레임워크
        --watir: 루비(Ruby) 기반 웹 어플리케이션 테스트 프레임워크
                 모든 언어 기반의 웹 애플리케이션 테스트와 브라우저 호환성 테스팅 가능