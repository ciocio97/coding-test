<논리 데이터 저장소 확인>
--데이터 모델?
    --현실 세계의 정보를 인간과 컴퓨터가 이해할 수 있도록 추상화하여 표현한 모델
        
        --개념적 데이터 모델
            
            --현실 세계에 대한 인식을 추상적, 개념적으로 표현하여 개념적 구조를 도출하는 데이터 모델
            --트랜잭션 모델링, View 통합방법, Attribute 합성 고려
            --개념적 데이터 모델은 DB와 관계 없음
            --개체 관계 다이어그램 (ERD)

        --논리적 데이터 모델
            
            --업무의 모습을 모델링 표기법으로 형상화하여 사람이 이해하기 쉽게 표현한 데이터 모델
            --목표 DBMS에 맞는 스키마 설계, 트랜잭션 인터페이스를 설계
            --정규화 수행
            --논리적 데이터베이스 구조로 매핑
            --스키마의 평가 및 정제

                --01 관계 데이터 모델 (Relation Data Model)
                        --2차원 테이블 형태로 구성된 모델
                        --기본 키와 이를 참조하는 외래 키로 관계 표현
                        --1:1, 1:N, N:M 관계를 자유롭게 표현
                        --E.F.Codd 박사가 제안한 모델

                            --관계 데이터 모델 구성 요소
                                --릴레이션 (Relation): 행(Row)과 열(Column)로 구성된 테이블
                                --튜플 (Tuple): 릴레이션의 행(Row)
                                --속성 (Attribute): 릴레이션의 열(Column)
                                --카디널리티 (Cardinality): 튜플(Tuple)의 수
                                --차수 (Degree): 속성(Attribute)의 수
                                --스키마 (Schema): 데이터 베이스의 구조, 제약 조건 등의 정보를 담고 있는 기본적인 구조
                                --인스턴스 (Instance): 정의된 스키마에 따라 생성된 테이블에 실제로 저장된 데이터의 집합

                            --관계 대수
                                --관계형 데이터 베이스에서 원하는 정보와 그 정보를 어떻게 유도하는가를 기술하는 절차적 정형 언어
                                        --일반 집합 연산자: 수학의 집합 개념을 릴레이션에 적용한 연산자
                                            --합집합 (Union) 
                                            --교집합 (Intersection) 
                                            --차집합 (Difference)
                                            --카티션 프로덕트 (CARTESIAN Product)

                                        --순수 관계 연산자: 관계 데이터베이스에 적용할 수 있도록 특별히 개발한 관계 연산자
                                            --Select: ᴕ조건(R) -> 릴레이션에서 조건을 만족하는 튜플 반환
                                            --Project: ᴫ속성리스트(R) -> 릴레이션에서 주어진 속성값으로만 구성된 튜플 반환
                                            --Join: R⨝S -> R과 S의 공통 속성을 이용해 만들어진 튜플 반환
                                            --Division: R/S -> S의 모든 튜플과 관련 있는 R의 튜플 반환

                            --관계 해석
                                --튜플 관계 해석과 도메인 관계 해석을 하는 비절차적 언어
                                --프레디컷 해석에 기반한 언어

                --02 계층 데이터 모델 (Hierarchical Data Model)
                        --논리적 구조가 트리 형태로 구성된 모델
                        --상하 관계가 존재한다 (부모 개체 - 자식 개체)
                        --1:N 관계만 허용

                --03 네트워크 데이터 모델 (Network Data Model)
                        --논리적 구조가 그래프 형태로 구성된 모델
                        --CODASYL DBTG 모델
                        --상위와 하위 레코드 사이에 N:M 관계를 만족하는 구조

                --04 개체-관계 모델 (E-R 모델)
                        --현실 세계에 존재하는 데이터와 그들 간의 관계를 사람이 이해할 수 있는 형태로 표현하는 모델
                        --속성 : 개체(Entity) / 속성(Attribute) / 관계(Relationship)

            --정규화 (Normalization)
                --관계형 데이터 모델에서 데이터의 중복성을 제거하여 이상 현상을 방지하고,
                  데이터의 일관성과 정확성을 유지하기 위해 무손실 분해하는 과정

                    --이상 현상?
                        --데이터의 중복성으로 인해 릴레이션을 조작할 때 발생하는 비합리적 현상
                        --삽입 이상 / 삭제 이상 / 갱신 이상
                
                --1차 정규화 (1NF) : '원'
                    --테이블 내의 속성값은 원자값을 가지고 있어야 한다
                --2차 정규화 (2NF) : '부'
                    --부분 함수 종속 관계를 제거 = 완전 함수적 종속 관계 만족
                --3차 정규화 (3NF) : '이'
                    -- A->B이고, B->C일 때, A->C인 경우 = 이행 함수 종속 관계
                    -- 이행 함수 종속 관계 제거
                --보이스-코드 정규화 (BCNF) : '결'
                    --결정자 후보 키가 아닌 함수 종속 제거
                --4차 정규화 (4NF) : '다'
                    --다치 종속 제거
                --5차 정규화 (5NF) : '조'
                    --조인 종속 제거
                    --4차 정규화 테이블에 대해 조인 연산을 수행했을 때
                      4차 정규화 수행 전 데이터와 일치하지 않는 문제 발생하기도 함
                      -> 이를 방지하기 위해 정확히 원래의 데이터로 복원할 수 있게끔 테이블을 만들거나 삭제하거나 ㅇㅇ

            --반 정규화 (De-Normalization)
                --정규화된 개체, 속성, 관계에 대해 성능 향상과 개발 운영의 단순화를 위해
                  중복, 통합, 분리 등을 수행하는 데이터 모델링의 기법
                --장점: 반 정규화된 데이터 구조는 성능 향상과 관리의 효율성이 증가한다
                --단점: 데이터의 일관성 및 정합성이 저하된다
                        유지를 위한 비용이 별도로 발생하여 성능에 나쁜 영향을 미칠 수 있다

<물리 데이터 저장소 설계>       
        --물리적 데이터 모델

            --논리 데이터 모델을 특정 DBMS의 특성 및 성능을 고려하여 물리적인 스키마를 만드는 데이터 모델
            --각 DBMS의 특성을 고려하여 데이터베이스 저장 구조(물리 데이터 모델)로 변환
            --테이블(Table),인덱스(Index), 뷰(View), 파티션(Partition) 등 객체를 생성
            --응답 시간, 저장 공간의 효율화, 트랜잭션 처리를 고려하여 설계
            --반 정규화 수행
            --레코드 집중의 분석 및 설계
            --접근 경로 설계

                01 개체를 테이블로 변환
                02 속성을 칼럼으로 변환
                03 UID를 기본키로 변환
                04 관계를 외래키로 변환
                05 컬럼 유형과 길이 정의
                06 반 정규화 수행

                    --물리 데이터 저장소 구성

                        --테이블 제약 조건(Constraint) 설계
                            --제한 (Restricted): 참조무결성 원칙을 위배하는 연산을 거절하는 옵션
                            --연쇄 (Cascade): 참조되는 릴레이션에서 튜플 삭제했을 때, 이 튜플을 참조하는 튜플들도 함께 삭제하는 옵셥
                            --널 값(Nullify): 참조되는 릴레이션에서 튜플을 삭제하고, 참조하는 릴레이션에서 해당 튜플을 참조하는 튜플들의 외래 키에 NULL값을 넣는 옵션

                        --인덱스(Index) 설계
                            --검색 연산의 최적화를 위해, 데이터베이스 내 열에 대한 정보를 구성한 데이터 구조 
                            --인덱스를 통해 전체 데이터의 검색 없이 필요한 정보에 대해 신속한 조회가 가능함
                                    
                                    --(인덱스) 분포도?
                                        --특정 칼럼의 데이터가 테이블에 평균적으로 분포되어 있는 정도
                                        --분포도가 좋은 칼럼은 단독적으로 생성한다
                                        --자주 조합되어 사용되는 컬럼은 결합 인덱스로 생성한다
                                        --넓은 범위를 인덱스 처리시, 오히려 전체 처리보다 많은 오버헤드를 발생시킬 수 있음

                        --뷰(View) 설계
                            --뷰 사용에 따라 수행 속도에 문제가 발생할 수 있음
                            --뷰의 조건은 최적의 액세스 경로를 사용할 수 있도록 함
                                --REPLACE: 뷰가 이미 존재하는 경우 재생성
                                --FORCE: 본 테이블 존재 여부 관계 없이 뷰 생성
                                --NOFORCE: 기본 테이블이 존재할 때 뷰 생성
                                --WITH CHECK OPTION: 서브 쿼리 내의 조건을 만족하는 행만 변경
                                --WITH READ ONLY: 데이터 조작어 작업 불가

                        --클러스터(Cluster) 설계
                            --인덱스의 단점을 해결한 기법, 분포도가 넓을수록 오히려 유리함
                            --인덱스를 사용했을 때 처리 부담이 되는 넓은 분포도에 활용한다
                            --인덱스를 사용한 처리 부담이 되는 넓은 분포도에 활용함
                            --분포도가 넓은 테이블의 클러스터링은 저장 공간의 절약이 가능함
                            --액세스 기법 X 액세스 효율 향상을 위한 물리적 저장 방법
                            --검색 효율은 높여주나 입력, 수정, 삭제 시는 부하가 증가함을 고려한다

                        --파티션(Partition) 설계
                            --장점: 성능 향상 / 가용성 향상 / 백업 가능 / 경합 감소

                                --레인지 파티셔닝(Range Partitioning)
                                    --연속적인 숫자나 날짜를 기준으로 하는 파티셔닝 기법
                                    --손쉬운 관리 기법을 제공 / 관리 시간의 단축 가능
                                --해시 파티셔닝(Hash Partitioning)
                                    --파티션 키의 해시 함수 값에 의한 파티셔닝 기법
                                    --균등한 데이터 분할 가능 / 성능의 질 향상
                                --리스트 파티셔닝(List Partitioning)
                                    --특정 파티션에 저장될 데이터를 명시적으로 제어 가능한 파티셔닝 기법
                                    --분포도가 비슷하고 데이터가 많은 SQL에서 칼럼의 조건이 많이 들어오는 경우에 유용
                                --컴포지트 파티셔닝(Composite Partitioning)
                                    --레인지 파티셔닝, 해시 파티셔닝, 리스트 파티셔닝 중 2개 이상의 파티셔닝을 결합하는 기법

                        --디스크(Disk) 구성 설계
                            --정확한 용량을 산정하여 디스크 사용 효율을 높임
                            --업무량이 집중되어 있는 디스크를 분리하여 설계
                            --입출력 경합을 최소화하여 데이터의 접근 성능을 향상시킴
                            --파티션 수행 테이블은 별도로 분류

<데이터베이스 기초 활용하기>
--데이터베이스(DB)란?
    --다수의 인원, 시스템 또는 프로그램이 사용할 목적으로 통합하여 관리되는 데이터의 집합
    --통합된 데이터 / 저장된 데이터 / 운영 데이터 / 공용 데이터
    --실시간 접근성 / 계속적인 변화 / 동시 공용 / 내용 참조

        --파일 시스템(File System) 개념
        --관계형 데이터베이스 관리시스템 (RDBMS) Relational Database Management System
            
            --관계형 모델을 기반으로 하는 가장 보편화된 데이터 베이스 관리 시스템
            --데이터를 저장하는 테이블의 일부를 다른 테이블과 상하 관계로 표시하며 상관 관계를 정리한다
            --변화하는 업무나 데이터 구조에 대한 유연성이 좋아 유지 관리가 용이하다
            --Oracle, SQL Server, MySQL, Maria DB

        --계층형 데이터베이스 관리시스템 (HDBMS) Hierarchical Database Management System

            --데이터를 상하 종속적인 관계로 계층화하여 관리하는 데이터베이스
            --데이터에 대한 접근 속도가 빠르지만, 종속적인 구조로 인하여 변화하는 데이터 구조에 유연하게 대응하기 쉽지 않다
            --IMS, System2000

        --네트워크 데이터베이스 관리 시스템 (NDBMS) Network Database Management System 

            --데이터의 구조를 네트워크 상의 망상 형태로 표현한 데이터 모델
            --트리 구조나 계층형 데이터베이스보다는 유연하지만, 설계가 복잡한 단점이 있다
            --IDS, IDMS

--데이터베이스 관리 시스템(DBMS)이란?
    --데이터의 복잡성을 해결하는 동시에, 데이터 추가,변경,검색,삭제 및 백업,복구,보안 등의 기능을 지원하는 소프트웨어

        --DBMS 유형
            --Key-Value DBMS: 키 기반 Get/Put/Delete 제공, Unique 한 키에 하나의 값을 가지고 있는 형태
            --Column Family Data Store DBMS: Key 안에 Column과 Value 조합으로 된 여러 개의 필드를 갖는 DBMS
            --Document Store DBMS: Value의 데이터 타입이 Document타입을 사용하는 DBMS
            --Graph DBMS: 시멘틱 웹과 온톨로지 분야에서 활용되는 그래프, 그래프로 데이터를 표현함
                                --온톨로지?
                                    실세계에 존재하는 모든 개념과, 개념들의 속성, 개념 간의 관계 정보를
                                    컴퓨터가 이해할 수 있도록 서술해놓은 지식 베이스

                                --시멘틱 웹?
                                    온톨로지를 활용하여 서비스를 기술하고,
                                    온톨로지의 의미적 상호 운용성을 이용해서 서비스 검색, 조합, 중재 기능을 자동화하는 웹
                                    온톨로지를 자동화된 기계(컴퓨터)가 처리하도록 하는 지능형 웹

        --DBMS 특징
            --데이터 무결성
            --데이터 일관성
            --데이터 회복성
            --데이터 보안성
            --데이터 효율성

    --빅데이터?
        시스템, 서비스, 회사 등에서 주어진 비용, 시간 내에 처리 불가능한, 수십 페타바이트(PB) 크기의 비정형 데이터
            --데이터의 Volume (양)
            --데이터의 Variety (다양성)
            --데이터의 Velocity (속도)

            --빅데이터 수집 기술
                --척와(Chuckwa): 비정형 데이터 수집 기술
                                 각 서버에서 에이전트를 실행하고, 컬렉터(Collector)가 에이전트로부터 데이터를 받아 HDFS에 저장하는 기술
                --스쿱(Sqoop): 정형 데이터 수집 기술
                               커넥터(Connector)를 사용하여 RDBMS(관계형 데이터베이스 시스템)에서 HDFS로 데이터를 수집하는 기술

        --HDFS (Hadoop Distributed File System)
            --대용량 데이터의 집합을 처리하는 응용프로그램에 적합하도록 설계된, 하둡 분산 파일 시스템

        --맵 리듀스 (Map Reduce)
            --대용량 데이터 처리를 분산 병렬 컴퓨팅에서 처리하기 위한 목적으로 제작함
            --2004년 구글에서 발표한 소프트웨어 프레임워크

    --NoSQL?
        --전통적인 RDBMS와 다른 DBMS를 지칭하기 위한 용어
        --데이터 저장에 고정된 테이블 스키마가 필요하지 않고, Join 연산을 사용할 수 없으며, 수평적으로 확장이 가능한 DBMS
            --Basically Available : 언제든지 데이터에 접근할 수 있다
            --Soft-State : 노드의 상태는 내부가 아닌 외부 에서 전송된 정보를 통해 결정된다
            --Eventually Consistency : 일정 시간이 지나면 데이터의 일관성이 유지된다

                --NoSQL 유형
                    --Key-Value DBMS: 키 기반 Get/Put/Delete 제공, Unique 한 키에 하나의 값을 가지고 있는 형태
                    --Column Family Data Store DBMS: Key 안에 Column과 Value 조합으로 된 여러 개의 필드를 갖는 DBMS
                    --Document Store DBMS: Value의 데이터 타입이 Document타입을 사용하는 DBMS
                    --Graph DBMS: 시멘틱 웹과 온톨로지 분야에서 활용되는 그래프, 그래프로 데이터를 표현함

    --데이터 마이닝(Data Mining)?
        --대규모로 저장된 데이터 안에서 체계적이고 자동적으로 통계적 규칙이나 패턴을 찾아내는 기술
        --대규모 데이터에서 의미있는 패턴을 파악하거나 예측하여 의사 결정에 활용하는 기법

            --데이터 마이닝 주요 기법
                    --분류 규칙 (Classification): 과거 데이터로부터 특성을 찾아내어 분류 모형을 만들어, 이를 토대로 새로운 레코드의 결과 값을 예측
                    --연관 규칙 (Association): 데이터 안에 존대하는 항목들 간의 종속 관계를 찾아내는 기법
                    --연속 규칙 (Sequence): 연관 규칙에 시간 관련 정보가 포함된 형태의 기법
                    --데이터 군집화 (Clustering): 대상 레코드들을 유사한 특성을 지닌 몇 개의 고르툽으로 분할하는 작업

---------------------------------------------------------------------------------------------------------------------------------------------------------                    

--시스템 카탈로그(System Catalog): 시스템 자신이 필요로 하는 스키마 및 여러가지 객체에 관한 정보를 포함하고 있는 시스템 데이터베이스.
                                  저장되는 내용은 메타 데이터(Metadata)이고, DBMS이 스스로 생성하고 유지하는 특징이 있다
                                  일반 사용자가 조회는 가능하나, 갱신할 수 없는 특징이 있다