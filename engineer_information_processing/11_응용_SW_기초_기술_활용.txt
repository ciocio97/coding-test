<운영 체제의 특징>
--운영 체제 (OS: Operating System)이란?
    --컴퓨터 시스템과 사용자 간의 인터페이스 기능을 담당.
    --사용자가 컴퓨터 시스템을 쉽게 사용할 수 있도록 인터페이스를 제공해주는 소프트웨어.

        --운영 체제 구조

            --쉘 (Shell) = 인터페이스(GUI)
                
                --운영 체제의 가장 바깥 부분에 위치해서 사용자 명령에 대한 처리를 담당.
                --사용자가 커널을 보다 편리하게 사용할 수 있게 함

            --커널 (Kernel)

                --하드웨어와 관련된 가장 내부적인 역할을 담당.
                --운영체제의 핵심적인 기능들이 모여있음.

        --운영 체제의 종류

            --윈도즈(Windows) 운영 체제
                --마이크로프트사가 개발한 운영체제
                --MS-DOS의 멀티태스킹 기능 + GUI 환경을 제공

                    --윈도즈 운영 체제 특징
                        --GUI 제공
                        --OLE 사용
                        --자동감지 기능 제공
                        --선점형 멀티태스킹 방식 제공

            --유닉스(Unix) 계열 운영 체제
                --교육 및 연구 기관에서 사용되는, 범용 다중 사용자 방식의 시분할 운영체제
                    
                    --유닉스 계열 운영 체제 특징
                        --대화식 운영 체제 기능
                        --다중 작업 기능(멀티태스킹)
                        --다중 사용자 기능
                        --이식성
                        --계층적 트리 구조 파일 시스템

                    --01 리눅스(Linux) 운영 체제
                        --유닉스 기반으로 개발된 오픈 소스 기반의 운영체제 

                    --02 맥(Mac) 운영 체제
                        --유닉스 기반으로 애플이 개발한 GUI기반 운영체제

                    --03 안드로이드(Android) 운영 체제
                        --휴대용 장치를 위한 운영 체제와 미들 웨어, UI, 표준 응용 프로그램을 포함하고 있는 운영체제

--운영 체제 기본 명령어

    --운영 체제 제어 방법

        --CLI: Command Line Interface / 사용자가 직접 명령어를 입력하여 컴퓨터에 직접 명령을 내리는 방식 
        --GUI: Graphic User Interface / 마우스로 화면을 클릭하여 그래픽 위주로 컴퓨터를 제어하는 방식

    --윈도즈(Windows) 운영 체제의 기본 명령어

            --CD: 현재 디렉터리 이름을 보여주거나 바꿈
            --CLS: 화면을 지움
            --ERASE: 파일을 지움
            --CMD: Windows 명령 프롬프트 창을 열어줌
            --EXIT: CMD 프로그램을 마침

    --유닉스(Unix)/리눅스(Linux) 운영 체제의 기본 명령어

            --접근 제어 매커니즘 { R:읽거나 W:쓰거나 X:실행 }

                --User: 파일을 사용하고 있는 사용자                                      { R:4 W:2 X:1 }
                --Group: 소유자를 제외하고 파일과 같은 그룹에 속해있는 모든 사용자 모임     { R:4 W:2 X:1 }
                --Other: 그 외 사용자                                                   { R:4 W:2 X:1 }

            --접근 권한 변경 (chmod)

                ex.chmod o-w seung.c  -> seung.c에 대한 other의-쓰기권한 제거
                ex.chmod 664 seung.c  -> seung.c의 접근권한은 664(RW-RW-R)
                ex.chmod go-w seung.c -> seung.c의 group,other에-쓰기권한 제거
                ex.chmod a=rw seung.c -> seung.c의 모든 사용자에게=읽기,쓰기권한 설정
                ex.chmod g+w, o-x seung.c  -> seung.c의 group에-읽기권한 추가, other에 실행권한 제거

                --대상: u(user) / g(group) / o(other) / a(all)
                --연산자: +(추가) / -(제거) / =(지정)
                --접근 권한: r(읽기) / w(쓰기) / x(실행)

--운영 체제 핵심 기능 *(메모리 관리 / 프로세스 관리)*

    --01 메모리 관리: 프로그램의 실행이 종료될 때까지 메모리를 가용한 상태로 유지 및 관리 기능

        --메모리 관리 기법

            --반입 기법: 주기억장치에 적재할 다음 프로세스의 반입 시기를 결정하는 기법
                --요구 반입 기법
                --예상 반입 기법

            --배치 기법: 프로세스를 주기억장치의 어느 위치에 저장할 것인지 결정하는 기법
                --최초 적합(First-fit) : 프로세스가 적재될 수 있는 가용 공간 중 제일 첫번째 분할에 할당하는 방식
                --최적 적합(Best-fit)  : 가용 공간 중에서 가장 크기가 비슷한 곳에 프로세스를 적재하는 방식 
                --최악 적합(Worst-fit) : 프로세스의 가용 공간들 속에서 가장 큰 공간에 할당하는 방식

    --02 프로세스 관리: '일시 중지 및 재실행' '동기화' '통신' '교착상태 처리' '프로세스 생성 삭제'

        --프로세스 상태 전이

            --생성(Create)   : 사용자에 의해 프로세스가 생성된 상태 
            --준비(Ready)    : CPU를 할당받을 수 있는 상태 ----(디스패치)----> 실행
                               준비 리스트 -> (우선순위부여O)                                        <----(웨이크업)---- 대기 
                               가장 높은 우선 순위를 갖는 프로세스가 다음 순서에 CPU를 할당 받음        <----(타이머 런아웃)-- 실행  
            --실행(Running)  : 프로세스가 CPU를 할당받아 동작 중인 상태 ---(블록)---> 대기
            --대기(Waiting)  : 대기 리스트 -> (우선순위부여X) 
            --완료(Complete) : 프로세스가 CPU를 할당받아 주어진 시간 내에 완전히 수행을 종료한 상태

                --디스패치? 준비 상태에 있는 여러 프로세스 중 실행될 프로세스 선정하여 CPU 할당
                --웨이크 업? 어느 순간 입출력이 종료되면, 대기 상태의 프로세스에게 입출력 종료 사실을 알리고 준비 상태로 전이
                --타이머 런 아웃? CPU할당받은 프로세스는 일정 시간 초과되면 스케줄러에 의해 CPU반납 후 준비 상태로 전이
                --블록? 실행 상태에 있는 프로세스가 '할당된 시간 초과하기 이전에 기타 사건이 발생'하면 CPU를 스스로 반납하고
                        입출력이 완료될 떄까지 대기 상태로 전이

        --프로세스 스케줄링
            --프로세스 스케줄링이란?
                --CPU를 사용하려고 하는 프로세스들 사이의 우선 순위를 관리하는 작업
                -- 처리율과 CPU 이용률을 증가시키고, 오버헤드, 응답시간, 반환시간, 대기시간을 최소화시키기 위한 기법

            --프로세스 스케줄링 주요 용어
                --응답시간: 프로세스들이 입력되어 수행하고 결과를 산출하기까지 소요되는 시간
                            응답시간(반환시간) = 대기시간 + 수행시간 ;
                --서비스 시간: 프로세스가 결과를 산출하기까지 걸리는 시간
                --시간 할당량: 한 프로세스가 프로세서를 독점하는 것을 방지하기 위해, 서비스되는 시간 할당량
                --응답률: (대기시간 + 서비스 시간) / 서비스 시간 --> HRN 스케줄에서 사용

            --프로세스 스케줄링 유형

                --선점형 스케줄링 (CPU 선점 O) 
                    --하나의 프로세스가 CPU를 차지하고 있을 때, 
                      우선 순위가 높은 다른 프로세스가 현재 프로세스를 중단시키고 CPU를 점유하는 스케줄링 방식

                        --알고리즘

                            --라운드 로빈(RR): 시간 할당량 (O) 
                                              시간할당량 끝나면 가차없이 아웃! 그 다음것들 데리고 와서 긴 것보다 빨리빨리 끝내벌임
                            --SRT: Shortest Remaining Time
                                            가장 짧은 시간이 소요되는 프로세스를 먼저 수행하는 방식.
                                            남은 처리 시간이 더 짧다고 판단되는 프로세스가 준비 큐에 생기면 언제라도 선점된다 !
                            --다단계 큐: 독립된 스케줄링 큐를 갖는다.
                            --다단계 피드백 큐

                --비선점형 스케줄링 (CPU 선점 X)
                    --한 프로세스가 CPU를 할당받으면 작업 종료 후 CPU 반환 시까지 다른 프로세스는 CPU 점유 불가능한 스케줄링 방식

                        --알고리즘

                            --우선순위
                            --기한부
                            --FCFS(FIFO): First Come First Service/First In First Out 
                                          쭉쭉쭉쭉
                            --SJF: Shortest Job First 
                                   우선순위가 높은 프로세스가 자원을 선점하면, 그 프로세스가 종료할 때까지 자원을 독점하는 방식
                            --HRN: Highest Response rato Next
                                   대기 중인 프로세스 중 현재 응답률(Response Ratio)이 가장 높은 것을 선택
                                   기아 현상(SJF) 최소화 기법
                                   HRN의 우선순위 = (대기 시간 + 서비스 시간) / 서비스 시간

                                   --(기아) 현상은 시스템 부하가 많아서 준비 큐에 있는 낮은 등급의 프로세스가 무한정 기다리는 현상이다.
                                     (기아) 현상을 해결하기 위해, 오랫동안 기다린 프로세스의 우선순위를 높여주는 (에이징) 기법을 활용한다.

<네트워크 기초 활용하기>
--네트워크란?
    --원하는 정보를 수신자 또는 기기에 정확하게 전송하기 위한 기반 인프라
        --WAN: 광대역 네트워크
        --LAN: 근거리 네트워크

        --CSMA/CD: (유D)'유선 LAN의 반이중 방식'(Half Duplex)에서, 각 단말이 신호 전송 전에 현재 채널이 사용 중인지 체크하여 전송하는 매체 엑세스 제어(MAC) 방식
        --CSMA/CA: (A무)'무선 LAN의 반이중 방식'(Half Duplex)에서, 사전에 가능한 충돌을 회피(Collision Avoidance)하는 무선전송 다원접속 방식

--네트워크 프로토콜이란?
    --서로 다른 시스템이나 기기들 간의 데이터 교환을 원활히 하기 위한 표준화된 '통신 규약'
    --컴퓨터가 메세지를 전달하고, 제대로 도착했는 지 확인하고, 도착 안했을 경우 메세지를 재전송하는 일련의 방법
    --컴퓨터나 원거리 통신 장비 사이에서 메세지를 주고받는 양식과 규칙의 체계
    --다른 기종의 장비는 각기 다른 통신 규약을 사용하는데, 프로토콜을 사용하면 다른 기기 간 정보 전달을 표준화할 수 있음 !
    --단편화/재조립/캡슐화/연결 제어/요류 제어/동기화/다중화/주소 지정

        --프로토콜의 3요소 (시스템 간의 정보 전송을 위해 필요한 것들)
            --구문(Syntax): 데이터 형식, 코딩, 신호 레벨 등의 규정
            --의미(Semantic): 조정과 에러 처리를 위한 규정
            --타이밍(Timing): 속도 조절과 순서 관리 규정

        --프로토콜 특징
            --단편화: 전송이 가능한 작은 블록으로 나눔
            --재조립: 단편화되어 온 조각들을 원래 데이터로 복원힘
            --캡슐화: 상위 계층의 데이터에 각종 정보를 추가하여 하위 계층으로 보냄
            --연결 제어: 데이터의 전송량이나 속도를 제어
            --오류 제어: 전송 중 잃어버리는 데이터나 오류가 발생한 데이터를 검증
            --동기화: 송신과 수신 측의 시점을 맞춤
            --다중화: 하나의 통신 화선에 여러 기기들이 접속할 수 있음
            --주소 지정: 송신지와 수신지의 주소를 부여하여 전확한 데이터 전송을 보장함

        --OSI 7계층 (Open System Interconnection)
            --ISO(International Standardization Organization)에서 개발한
              컴퓨터 네트워크 프로토콜 디자인 & 통신을 계층으로 나누서 설명한, 개방형 시스템 상호 연결 모델
            --각 계층은 하위 계층의 기능을 이용하여 상위 계층에 기능을 제공한다
            --계층을 지날 때마다 헤더(Header)가 붙는데, 이는 해당 계층의 기능과 관련된 제어 정보가 포함되어있음.
            --제어 정보들은 운영체제가 제공하는 포로토콜에 의해 송신 측에서는 추가++ 수신 측에서는 제거--

                --7계층: 응용 계층 (Application Layer)       전송단위: 데이터(Data)

                            프로토콜   --01 HTTP
                                     --02 FTP
                                     --03 SMTP
                                     --04 POP3
                                     --05 IMAP
                                     --06 Telnet

                --6계층: 표현 계층 (Presentation Layer)      전송단위: 데이터(Data)

                            프로토콜   --01 JPEG
                                     --02 MPEG

                --5계층: 세션 계층 (Session Layer)           전송단위: 데이터(Data)

                            프로토콜   --01 RPC
                                     --02 NetBIOS 

                --4계층: 전송 계층 (Transport Layer)         전송단위: 세그먼트(Segment)

                            장비  --01 L4 스위치

                            프로토콜 --01 TCP (Transmission Control Protocol)
                                            --인터넷 프로토콜 스위트의 핵심 프로토콜 중 하나.
                                            --TCP/IP 라는 명칭으로 사용됨
                                            --'신'뢰성 보장 / '연'결지향적 특징 / '흐'름 제어(Flow Control) / '혼'잡 제어 / 전이중(Full Duplex) 방식의 양방향 가상회선
                                            --전송 데이터와 응답 데이터를 함께 전송할 수 있음 !!
                                     --02 UDP (User Datagram Protocol)
                                            --비신뢰성 / 순서화 되지 않은 데이터그램 서비스 제공 / 멀티태스킹 가능 / 단순 헤더

                --3계층: 네트워크 계층 (Network Layer)        전송단위: 패킷(Packet)

                            장비  --01 라우터
                                  --02 게이트웨이
                                  --03 L3 스위치
                                  --04 인터넷 공유기
                                  --05 망 스위치 허브

                            프로토콜 --01 IP (Internet Protocol): 송수신 간의 패킷 단위. 데이터를 교환하는 네트워크에서 정보를 주고 받는 데 사용하는 통신 프로토콜

                                            --IPv4: 32비트 주소 체계를 가짐
                                                    Network를 나타내는 부분 + Host를 나타내는 부분 (이를 구분하는 것 === 서브넷 마스크)
                                                        --IPv4 주소 할당 방법
                                                            --사이더 표기법(CIDR): 클래스 없는 도메인 간 라우팅 기법. (네트워크 구분을 클래스로 하지 않음 !)
                                                            --   네트워크 구분을 클래스로 했을 때 ㅋㅋ (Class)
                                                                    --A 0 ~ 127
                                                                    --B 128 ~ 191 (A 시작값 + 128)
                                                                    --C 192 ~ 223 (B 시작값 + 64)
                                                                    --D 224 ~ 239 (C 시작값 + 32)
                                                                    --E 240 ~ 255 (D 시작값 + 16)
                                            --IPv6: 128비트 주소 체계를 가짐
                                                        --이동성 / 인증 및 보안 기능 / 단순 헤더 적용 / 실시간 패킷 추적 가능

                                            --IPv4 -> IPv6 전환 방법
                                                --듀얼 스택: IP계층에 2가지 프로토콜이 모두 탑재되어 있고, 통신 상대방에 따라 해당 IP 스택 선택 가능
                                                --터널링: IPv6 망에서 인접한 IPv4 망을 거쳐 다른 IPv6망으로 통신할 때 사용
                                                          IPv4 망에 터널을 만들고 프로토콜로 캘슐화 하여 전송하는 방식
                                                --주소변환: 2가지 망 사이에 주소변환기를 사용하여 서로 다른 네트워크 상의 패킷을 변환하는 방식
                                  
                                     --02 ARP (Address Resolution Protocol): IP 네트워크 상에서 IP 주소를 MAC 주소 (물리 주소)로 변환하는 프로토콜
                                     --03 RARP (Reverse Address Resolution Protocol): IP 호스트가 자신의 MAC 주소는 알지만 IP 주소는 모르는 경우, 서버로부터 IP 주소를 요청하기 위해 사용하는 프로토콜
                                     --04 ICMP (Internet Control Message Protocol): ICMP 프로토콜을 사용해서 (ping 유틸리티 구현을 통해) '오류'가 발생했음을 알림
                                     --05 IGMP (Internet Group Management Protocol): 화상 회의, IPTV에서 활용되는 프로토콜
                                                                                     호스트 컴퓨터와 인접 라우터가 멀티캐스트 그룹 멤버쉽을 구성하는데 사용하는 통신 프로토콜
                                     --06 라우팅 프로토콜 (Routing Protocol): 목적지까지 갈 수 있는 여러 경로 중 최적의 경로를 설정해 주는 라우터 간의 상호 통신 규약

                                            --RIP (Routing Information System): 최대 홉 카운트를 15로 제한
                                                                                AS 내에서 사용하는 '거리 백터(Distance-Vector) 알고리즘'에 기초하여 개발된 내부 라우팅 프로토콜.
                                            --OSPF (Open Shortest Path First): 홉 카운트를 제한하지 않음
                                                                               RIP의 단점을 개선하기 위해 자신을 기준으로 '링크 상태(Link-State) 알고리즘'을 적용하여 최단 경로를 찾는 라우팅 프로토콜
                                                                               대표적인 내부 라우팅 프로토콜. 다익스트라 알고리즘이용. 대규모 네트워크에 적합.
                                            --BGP (Border Gateway Protocol): AS 자치 시스템
                                                                             AS 상호 간(Inter-AS 또는 Inter-Domain)에 경로 정보를 교환하기 위한 라우팅 프로토콜로 변경 발생 시 
                                                                             대상까지의 가장 짧은 경로를 경로 벡터(Path Vector) 알고리즘을 통해 선정하고, 
                                                                             TCP Port 179번을 통해 자치 시스템(AS)으로 라우팅 정보를 신뢰성 있게 전달하는 라우팅 프로토콜

                                                --라우팅 알고리즘  01 거리 백터 알고리즘 (벨만-포드 알고리즘)
                                                                  02 링크 상태 알고리즘 (다익스트라 알고리즘)
 
                                     --07 멀티캐스트 프로토콜: 같은 내용의 데이터를 여러 명의 특정한 그룹의 수신자들에게 동시에 전송할 수 있는 프로토콜 (멀티캐스트 라우팅 프로토콜 + ICMP)
                                     --08 유니캐스트 프로토콜: 고유 주소로 식별된 하나의 네트워크 목적지에 one-to-one 트래픽 또는 메세지를 전송하는 프로토콜
                                     --09 브로드캐스트 프로토콜: 하나의 송신자가 같은 서브 네트워크 상의 모든 수신자에게 데이터를 전송하는 프로토콜
                                     --10 애니캐스트 프로토콜: 단일 송신자로부터 데이터그램을 토폴로지 상의 잠재적인 수신자 그룹 안에서 가장 가까운 노드로 연결 시키는 전송 프로토콜

                --2계층: 데이터링크 계층 (Data Link Layer)    전송단위: 프레임(Frame)         링크의 설정과 유지 및 종료 담당 / 노드 간 회선 제어, 흐름 제어, 오류 제어 기능 수행

                            장비  --01 브리지
                                  --02 L2 스위치
                                  --03 NIC
                                  --04 스위칭 허브

                            프로토콜 --01 HDLC (High-Level Link Control)
                                     --02 PPP (Point-to-Point Protocol)
                                     --03 프레임 릴레이 (Frame Relay)   
                                     --04 ATM (Asynchronous Transport Mode)

                --1계층: 물리 계층 (Physical Layer)           전송단위: 비트(Bit)

                            장비  --01 허브
                                  --02 리피터

--네트워크 전달 방식

    --패킷 스위칭: 컴퓨터 네트워크 통신 방식 중 하나
                   작은 블록의 패킷으로 데이터를 전송 
                   데이터를 전송하는 동안만 네트워크 자원을 사용하도록 함

                   --X.25 : 통신을 원하는 두 단말장치가 패킷 교환망을 통해 패킷을 원활히 전달하기 위한 통신 프로토콜
                            고정된 대역폭을 갖고 신뢰성 있는 통신을 하지만, 복잡한 기능으로 인해 ISDN 등의 고속망으로 대체되고 있는 통신 기술.
                   --프레임 릴레이 : ISDN을 사용하기 위한 프로토콜. 
                   --ATM : (Asynchronous Transfer Mode) 비동기 전송 모드라고 하는 광대역 전송에 쓰이는 스위칭 기법
                            OSI 7계층과는 다른 고유한 참조 모델을 가지고 있음.

--교착 상태?
    --상호 배제에 의해 나타나는 문제점으로, 자원을 무한정으로 기다리고 있는 상태

        --발생 조건

            --상호 배제: 한 자원에 대한 여러 프로세스의 동시 접근 불가
            --점유와 대기: 자원을 가진 상태에서 다른 프로세스가 사용하고 있는 자원의 반납을 기다리는 것
            --비 선점: 다른 프로세스의 자원을 강제로 가져올 수 없음
            --순환 대기: 각 프로세스가 순환적으로 다음 프로세스가 요구하는 자원을 가지고 있는 것

        --해결 방법

            --예방: 발생조건(상점비환) 중 하나만 해결하면 된다
            --회피: 교착 상태가 발생하지 않도록 알고리즘을 적용하는 방법
                        --은행원 알고리즘(Banker's Algorithm): 사용자 프로세스가 사전에 작업에 필요한 자원의 수를 제시하고,
                                                              운영 체제가 자원의 상태를 감시하다가 안정 상태일때만 자원을 할당해주는
                                                              교착상태 회피 기법 !
                        --자원 할당 그래프
            --회복: 교착 상태가 발생하면 이후에 문제 해결
            --무시: 교착 상태 해결 시 문맥 교환이 발생하는데, 문맥 교환 시 발생하는 성능 저하가 교착 상태에 의한 성능 저하보다 클 때 무시한다
            --복구: 교착 상태를 일으킨 프로세스를 종료 (Process kill)하거나 할당된 자원을 해제하는 것


<기본 개발환경 구축하기>
--운영체제 선택
    --윈도즈 계열 운영체제
    --리눅스 계열 운영체제
--운영체제 운용
    --서버 운영체제 운용 기준
    --개별 PC용 운영체제 운용 기준

--프로그래밍 언어
--개발 지원 도구
    --요구사항관리  ex. JFeature
    --설계  ex. DBdesigner
    --구현  ex. Eclipse, CodeBlock
    --테스트  ex. JUnit
    --빌드  ex. Ant, Jenkins
    --형상 관리  ex. Subversion
    --품질 관리  ex. jDepend, Mylyn
    --이슈 관리  ex. Mantis, Git
    --프로젝트 관리  ex. Redmine, Openproj

--응용 시스템 개발 인프라 구축
    --개발환경 인프라 구축 개요
    --클라우드 기반 개발 인프라 구축