Git Hub; (remote) 원격

* 원격 저장소 먼저 생성하고 로컬 저장소에 연결하는 게 최고다 (삽질로 얻어냄,,)
        git pull --rebase origin 저장소 이름
        : 괜히 로컬 저장소에서 폴더 많이 만들어 놓지말고
        : 원격저장소에서 원하는대로 만들고 불러오십쇼 => vsc에서 파일 추적 현황이 안뜨는 문제 발생
        : git pull로 원격저장소 내용 델꼬와도 안됌

- branch

    * 브랜치 상태 확인
        git branch -a : 브랜치 확인합니다햣 

    * 브랜치 변경하고 싶어여
        git switch 브랜치 이름 : 브랜치 변경합니다
        git switch -c 브랜치 이름 : 브랜치 새로 만들기 & 브랜치 변경하기 (기본 HEAD커밋 지정)
        git switch -c 브랜치이름 특정커밋이름 : 특정 커밋을 지정해 브랜치 새로 만들기



    * 브랜치 생성 후 푸쉬할 때 매번 해야하는 것
        git push --set-upstream origin 저장소 이름 : 

        # 생략 방법
            git config --global push.default 1. nothing  : 아무것도 푸쉬 안함
                                             2. matching : 로컬과 원격 이름 동일한 브랜치 모두 푸쉬
                                             3. upstream : 현재의 브랜치 -> 업스트림 브랜치 푸쉬
                                             4. current  : 현재의 브랜치 -> 같은 이름 브랜치 푸쉬
            git push -u : 업스트림 브랜치를 지정하지 않아도 되지만,
                          로컬과 원격 간의 추적이 설정 안되었으므로
                          추적 설정 까지 완료


 

* 원격 저장소 이름 변경했을 때

    git branch -m 예전브랜치이름 바꾼브랜치이름 : 변경

    git fetch origin :

    git branch -u origin/바꾼브랜치이름 바꾼브랜치이름 :

    git remote set-head origin -a :








Git; (work flow) 로컬

- git directory History

    git push origin '저장소 이름' : 푸쉬는 더 신중히 * 1000

    * 아 푸쉬 왜 안됌?
        1. 원격 저장소랑 로컬 저장소 동기화가 안되어서
            git pull --rebase origin 저장소 이름 
            : 깃헙에서 변경한 거 있으면 바로바로 로컬 동기화 시켜주세요 예?
            : 아 되도록이면 깃헙에서 바꾸지 마세요 ^^

        2. push하고 싶었던 폴더 내에 .git파일이 있는 걸 깜빡하고 git add.(모두 추가)해버려서
            git rm --cached [폴더 위치]
            : 또는 해당 폴더에 가서 hidden file을 검색해서 .git파일을 직접 지워주자
            : .git 파일있는지 애초에 제대로 확인할 것

    * github에 파일을 올렸는데 폴더 생김새가 이상하다 ?
        git rm --cashed . -rf
        git rm --cashed [폴더 이름]
    * github에 올린 파일 중 일부만 삭제하고 싶다 ?
        git rm --cashed [파일 이름]

- staging area / index

    01 git commit -m '커밋 설명 간단히' : 커밋은 신중히

    02 git commit --amend : 바로 이전에 커밋한 내용 수정하기
                         수정 완료하고 esc -> :wq

    03 git rebase -i HEAD~[num] : 위에서부터 [ex.3]번째 커밋한 내용 수정하기

    * git log : 여태 내가 한 커밋을 쭉 확인한다
      git rebase -i HEAD~[num] : 현재 작업중인 브랜치의 가장 최근 커밋 [num]개를 보여준다
      pick -> reword 변경 : reword로 변경한 커밋들은 이름을 수정할 수 있다
                           수정 완료하고 esc -> :wq
      git log : 수정이 잘 되었는지 git log를 통해 확인한다 

    04 git reset --soft : 잠깐 바로 직전 커밋으로 갈게
    
    * 어멋 내가 지우고 싶은 커밋이 한참 전에 있잖아 !
        #(타임머신)
            git reflog : 커밋 이력과 이름 확인
            git reset --soft '커밋 이름''파일 이름'  : 선택한 커밋으로 돌아옴 & 이전 파일 유지 O (index O, WD O)
            git reset --mixed '커밋 이름''파일 이름' : 선택한 커밋으로 돌아롬 & 이전 파일 유지 O (index X, WD O)
            = git restore --staged '파일 이름' : add를 통해 stage에 있는 거 WD로 빼내기
            git reset --hard '커밋 이름''파일 이름'  : 선택한 커밋으로 돌아옴 & 이전 파일 유지 X (index X, WD X)
                                                      - 커밋 안되어 있으면 이전 파일복원 불가 
            
        #(역사서)
            git revert '커밋 이름' : 선택한 커밋 되돌림 & 이력에 '되돌림' 추가
                                    푸쉬를 하셨다면 무적권 revert (안전)

- working directory

    git add '파일 이름' : untracked -> tracked (unmodified / modified)



* 로컬 -> 원격 (저장소)
    : 로컬에서 새로운 폴더 만들면 원격 저장소 꼭 지정해줘라

    git remote -v : 원격 저장소 버전 확인 (지금 어디랑 연결되있나~?)

    git remote set-url origin 유얼엘 : 원격 저장소 변경할게여

    git remote add origin 유얼엘 : 원격 저장소 지정할게여

    git push -u origin master : 변경사항 푸쉬


* 로컬 -> 원격 (저장소)
    : local directory에서 파일 위치를 대거 이동했거나 파일 삭제를 굉장히 많이 했을 때
      (git을 쓰면서 잊지 말아야 할 것은 파일의 이동/삭제/추가/변경 모두 github에 반영해줘야한다는거다.)

    git add -u : 삭제한 파일들을 update tracked files

    git commit -m "msg" : 

    git push : 삭제한 내용들 github에 반영

